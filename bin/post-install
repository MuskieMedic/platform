import os
from subprocess import check_output
from os.path import isdir, join
import shutil
from syncloud_app import logger
from syncloud_platform.injector import get_injector
from syncloud_platform.control.systemctl import add_service
from syncloud_platform.application import api

from syncloud_platform.gaplib import fs, linux

APP_NAME = 'platform'
USER_NAME = 'platform'

log = logger.get_logger('platform_post_install')

linux.fix_locale()

linux.useradd(USER_NAME)

platform_paths = api.get_app_paths(APP_NAME)
log.info(fs.chownpath(platform_paths.get_install_dir(), USER_NAME, recursive=True))

# TODO: only for migration from pre-protocol version (< v240), remove after upgrading test users
user_config_file = '/opt/data/platform/user_platform.cfg'
if os.path.isfile(user_config_file):
    check_output("sed -i 's/external_access.*=.*http.*/external_access = True/g' {0}".format(user_config_file), shell=True)
    check_output("sed -i 's/external_access.*=.*None.*/external_access = False/g' {0}".format(user_config_file), shell=True)

# TODO: User specific cron remove as we did not have proper cleanup in post-remove, remove after upgrading test users
print(check_output("echo "" | crontab - -u platform", shell=True))

data_dir = platform_paths.get_data_dir()
fs.chownpath(data_dir, USER_NAME)

data_dirs = [
    join(data_dir, 'webapps'),
    join(data_dir, 'log'),
    join(data_dir, 'nginx'),
    join(data_dir, 'openldap-data')
]

for data_dir in data_dirs:
    fs.makepath(data_dir)
    fs.chownpath(data_dir, USER_NAME)

injector = get_injector()

platform_config = injector.platform_config
hardware = injector.hardware
path_checker = injector.path_checker
ldap_auth = injector.ldap_auth

if not isdir(platform_config.get_disk_root()):
    os.mkdir(platform_config.get_disk_root())

if not isdir(platform_config.get_internal_disk_dir()):
    os.mkdir(platform_config.get_internal_disk_dir())

if not path_checker.external_disk_link_exists():
    hardware.relink_disk(
        platform_config.get_disk_link(),
        platform_config.get_internal_disk_dir())

if not os.path.isfile(platform_config.get_ssl_certificate_file()):
    shutil.copy(platform_config.get_default_ssl_certificate_file(), platform_config.get_ssl_certificate_file())
    shutil.copy(platform_config.get_default_ssl_key_file(), platform_config.get_ssl_key_file())

injector.platform_cron.remove()
injector.platform_cron.create()

udev = injector.udev
udev.remove()
udev.add()

add_service(APP_NAME, 'platform-cpu-frequency')
add_service(APP_NAME, 'platform-insider-sync')
add_service(APP_NAME, 'platform-ntpdate')
add_service(APP_NAME, 'platform-uwsgi-internal')
add_service(APP_NAME, 'platform-uwsgi-public')
add_service(APP_NAME, 'platform-nginx')
add_service(APP_NAME, 'platform-openldap', start=ldap_auth.installed())
